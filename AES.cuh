//
// Created by MGalaxy on 2023/3/14.
//

#ifndef ECE277FINALPROJECT_AES_CUH
#define ECE277FINALPROJECT_AES_CUH

static const uint8_t cpu_sbox[256] = {
        //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};

static const uint8_t cpu_Rcon[11] = {
        0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};

__constant__ uint8_t sbox[256] = {
        //0     1    2      3     4    5     6     7      8    9     A      B    C     D     E     F
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};

//typedef struct __align__(16) {
//uint8_t data[16];
//}
//block;

inline uint8_t cpu_get_sbox_value(uint8_t index) {
    return cpu_sbox[index];
}

__inline__ __device__ void block_xor(const uint8_t *a, const uint8_t *b, uint8_t *dst) {
    for (int i = 0; i < 16; i++) {
        dst[i] = a[i] ^ b[i];
    }
}

__inline__ __device__ void block_copy(const uint8_t *src, uint8_t *dst) {
    for (int i = 0; i < 16; i++) {
        dst[i] = src[i];
    }
}

__device__ void print_block(uint8_t *a) {
    for (int i = 0; i < 16; i++) {
        printf("%02x", a[i]);
    }
}

__device__ uint8_t get_sbox_value(uint8_t index) {
    return sbox[index];
}

__inline__ __device__ void sub_bytes(uint8_t *state) {
    for (int i = 0; i < 16; i++) {
        state[i] = sbox[state[i]];
    }
}

__device__ void shift_rows(uint8_t *state) {
    uint8_t tmp;

    tmp = state[1];
    state[1] = state[5];
    state[5] = state[9];
    state[9] = state[13];
    state[13] = tmp;

    tmp = state[2];
    state[2] = state[10];
    state[10] = tmp;

    tmp = state[6];
    state[6] = state[14];
    state[14] = tmp;

    tmp = state[3];
    state[3] = state[15];
    state[15] = state[11];
    state[11] = state[7];
    state[7] = tmp;

}

__inline__ __device__ uint8_t xtime(uint8_t x) {
    return ((x << 1) ^ (((x >> 7) & 1) * 0x1b));
}

__device__ void mix_columns(uint8_t *state) {
    uint8_t o1, o2, o3, o4;
    uint8_t tmp1, tmp2, tmp3;
    for (int i = 0; i < 4; i++) {
        o1 = state[i * 4 + 0];
        o2 = state[i * 4 + 1];
        o3 = state[i * 4 + 2];
        o4 = state[i * 4 + 3];
        tmp3 = o1;
        tmp1 = o1 ^ o2 ^ o3 ^ o4;
        tmp2 = o1 ^ o2;
        tmp2 = xtime(tmp2);
        state[i * 4 + 0] = tmp2 ^ tmp1 ^ o1;

        tmp2 = o2 ^ o3;
        tmp2 = xtime(tmp2);
        state[i * 4 + 1] = tmp2 ^ tmp1 ^ o2;

        tmp2 = o3 ^ o4;
        tmp2 = xtime(tmp2);
        state[i * 4 + 2] = tmp2 ^ tmp1 ^ o3;

        tmp2 = o4 ^ tmp3;
        tmp2 = xtime(tmp2);
        state[i * 4 + 3] = tmp2 ^ tmp1 ^ o4;
    }
}

__device__ void round_encrypt(uint8_t *text, uint8_t *key) {
    uint8_t tmp[16];
    block_copy(text, tmp);
    sub_bytes(tmp);
    shift_rows(tmp);
    mix_columns(tmp);
    block_xor(tmp, key, tmp);
    block_copy(tmp, text);
}

__device__ void final_round_encrypt(uint8_t *text, uint8_t *key) {
    uint8_t tmp[16];
    block_copy(text, tmp);
    sub_bytes(tmp);
    shift_rows(tmp);
//    mix_columns(tmp);
    block_xor(tmp, key, tmp);
    block_copy(tmp, text);
}


__device__ void aes_encryption(uint8_t *src, uint8_t *key, uint8_t *dst) {
    int i;
    block_xor(src, &(key[0]), dst);
    for (i = 1; i < 10; i++) {
        round_encrypt(dst, &(key[16 * i]));
    }
    final_round_encrypt(dst, &key[160]);
}

void key_expansion(uint8_t *key_space) {
    uint8_t tmp[4];
    int i, j, k;
    for (i = 4; i < 4 * (11); ++i) {

        k = (i - 1) * 4;
        tmp[0] = key_space[k + 0];
        tmp[1] = key_space[k + 1];
        tmp[2] = key_space[k + 2];
        tmp[3] = key_space[k + 3];

        if (i % 4 == 0) {

            const uint8_t u8tmp = tmp[0];
            tmp[0] = tmp[1];
            tmp[1] = tmp[2];
            tmp[2] = tmp[3];
            tmp[3] = u8tmp;

            tmp[0] = cpu_get_sbox_value(tmp[0]);
            tmp[1] = cpu_get_sbox_value(tmp[1]);
            tmp[2] = cpu_get_sbox_value(tmp[2]);
            tmp[3] = cpu_get_sbox_value(tmp[3]);

            tmp[0] = tmp[0] ^ cpu_Rcon[i / 4];
        }
        j = i * 4;
        k = (i - 4) * 4;
        key_space[j + 0] = key_space[k + 0] ^ tmp[0];
        key_space[j + 1] = key_space[k + 1] ^ tmp[1];
        key_space[j + 2] = key_space[k + 2] ^ tmp[2];
        key_space[j + 3] = key_space[k + 3] ^ tmp[3];
    }
}


#endif //ECE277FINALPROJECT_AES_CUH
